<?php

/**
 * @file
 * Advertising Entity: DFP module file.
 */

use Drupal\Core\Cache\Cache;

/**
 * Implements hook_ad_entity_module_info().
 */
function ad_entity_dfp_ad_entity_module_info() {
  return [
    'personalization' => TRUE,
    'consent_aware' => TRUE,
  ];
}

/**
 * Implements hook_page_attachments().
 */
function ad_entity_dfp_page_attachments(&$attachments) {
  $config = \Drupal::config('ad_entity.settings');

  // By default, the ordering targeting info is enabled.
  // We only need this setting when this feature is explicitly not enabled.
  if ($config && ($settings = $config->get('dfp'))) {
    if (isset($settings['order_info']) && empty($settings['order_info'])) {
      $attachments['#attached']['drupalSettings']['dfp_order_info'] = FALSE;
    }
  }

  // We cannot foresee whether or not the provider is being used,
  // e.g. via Drupal attach behaviors and AJAX, but it must be
  // placed into the HTML head. On admin pages though, we most
  // probably don't need the library. It would still be loaded
  // if an ad is being included directly on the page.
  /** @var \Drupal\Core\Routing\AdminContext $admin_context */
  $admin_context = \Drupal::service('router.admin_context');
  if (!$admin_context->isAdminRoute() && _ad_entity_dfp_default_exists()) {
    $attachments['#attached']['library'][] = 'ad_entity/provider.googletag';

    // When script preloading is enabled, include
    // a preload tag for the required external libraries.
    if ($config && $config->get('tweaks.include_preload_tags')) {
      _ad_entity_attach_gpt_preload($attachments);
    }
  }
}

/**
 * Implements hook_theme().
 */
function ad_entity_dfp_theme($existing, $type, $theme, $path) {
  return [
    'dfp_default' => [
      'variables' => ['ad_entity' => NULL],
      'file' => 'ad_entity_dfp.theme.inc',
    ],
    'dfp_iframe' => [
      'variables' => ['ad_entity' => NULL],
      'file' => 'ad_entity_dfp.iframe.inc',
    ],
    'dfp_amp' => [
      'variables' => ['ad_entity' => NULL],
      'file' => 'ad_entity_dfp.amp.inc',
    ],
  ];
}

/**
 * Checks whether Advertising entities using the default DFP view exist.
 *
 * @return bool
 *   Returns TRUE when entities using the DFP type exist, FALSE otherwise.
 */
function _ad_entity_dfp_default_exists() {
  $storage = \Drupal::entityTypeManager()->getStorage('ad_entity');
  $cache = \Drupal::cache('default');
  $cid = 'ad_entity_dfp.using_default';
  $plugin_id = 'dfp_default';

  if ($cached = $cache->get($cid)) {
    if (empty($cached->data)) {
      return FALSE;
    }
    /** @var \Drupal\ad_entity\Entity\AdEntityInterface $ad_entity */
    if ($ad_entity = $storage->load($cached->data)) {
      if ($plugin_id === $ad_entity->get('view_plugin_id')) {
        return TRUE;
      }
    }
  }

  $entities = $storage->loadByProperties(['view_plugin_id' => $plugin_id]);
  if ($exists = !empty($entities)) {
    $entity = reset($entities);
    $cache->set($cid, $entity->id(), Cache::PERMANENT, ['config:ad_entity_list']);
  }
  return $exists;
}
