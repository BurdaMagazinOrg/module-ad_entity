<?php

/**
 * @file
 * Advertising Entity: Fallback module file.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Component\Utility\Crypt;
use Drupal\ad_entity\Entity\AdEntityInterface;

/**
 * Implements hook_form_BASE_FORM_ID_alter() for ad_entity_form.
 */
function ad_entity_fallback_form_ad_entity_form_alter(array &$form, FormStateInterface $form_state) {
  \Drupal::moduleHandler()->loadInclude('ad_entity_fallback', 'inc', 'admin');
  _ad_entity_fallback_form($form, $form_state);
}

/**
 * Implements hook_ENTITY_TYPE_view_alter() for ad_entity.
 */
function ad_entity_fallback_ad_entity_view_alter(array &$build, AdEntityInterface $ad_entity) {
  $settings = $ad_entity->getThirdPartySettings('ad_entity_fallback');
  if (empty($settings['ad_entity_id'])) {
    return;
  }
  $type_manager = \Drupal::entityTypeManager();
  $storage = $type_manager->getStorage('ad_entity');
  /** @var \Drupal\ad_entity\Entity\AdEntityInterface $fallback_entity */
  if (!($fallback_entity = $storage->load($settings['ad_entity_id']))) {
    return;
  }
  // We modify this entity, others might use it later.
  // Therefore, clone it to prevent unexpected behavior.
  $fallback_entity = clone $fallback_entity;

  // We need to know which container should behave
  // as a fallback for another container.
  $correlation_id = Crypt::randomBytesBase64(4);
  $ad_entity->_attributes['data-fallback-container'] = $correlation_id;
  $fallback_entity->_attributes['data-fallback-container-for'] = $correlation_id;

  $fallback_entity->set('disable_initialization', TRUE);
  $view_builder = $type_manager->getViewBuilder('ad_entity');
  $fallback_view = $view_builder->view($fallback_entity, $build['#variant']);
  $fallback_view['#attached']['library'][] = 'ad_entity_fallback/view';

  $build = [$build, $fallback_view];
}
