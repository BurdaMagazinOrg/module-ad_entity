<?php

/**
 * @file
 * Advertising Entity module file.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\FieldableEntityInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Component\Utility\Xss;
use Drupal\ad_entity\Plugin\AdContextManager;

/**
 * Implements hook_theme().
 */
function ad_entity_theme($existing, $type, $theme, $path) {
  return [
    'ad_entity' => [
      'variables' => ['ad_entity' => NULL, 'variant' => '["any"]'],
      'file' => 'ad_entity.theme.inc',
    ],
    'ad_entity_context' => [
      'variables' => ['item' => NULL, 'definition' => []],
      'file' => 'ad_entity.theme.inc',
    ],
  ];
}

/**
 * Implements hook_page_attachments().
 */
function ad_entity_page_attachments(array &$page) {
  if ($config = \Drupal::config('ad_entity.settings')) {
    $page['#attached']['drupalSettings']['ad_entity_responsive'] =
      $config->get('enable_responsive_behavior') ? TRUE : FALSE;
  }
}

/**
 * Implements hook_entity_view().
 */
function ad_entity_entity_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  // Check whether the entity being shown defines its own context data.
  // If so, reset the context data for this entity.
  if ($entity instanceof FieldableEntityInterface) {
    /** @var \Drupal\Core\Field\FieldDefinitionInterface $definition */
    foreach ($entity->getFieldDefinitions() as $definition) {
      if ($definition->getType() == 'ad_entity_context') {
        $field_name = $definition->getName();
        if ($display->getComponent($field_name)) {
          /** @var \Drupal\ad_entity\Plugin\AdContextManager $context_manager */
          if ($context_manager = \Drupal::service('ad_entity.context_manager')) {
            $context_manager->resetContextDataForEntity($entity);
            $build['#post_render'][] = '_ad_entity_reset_to_previous_context_data';
          }
        }
      }
    }
  }
}

/**
 * Implements hook_ad_context_data_reset().
 */
function ad_entity_ad_context_data_reset(AdContextManager $context_manager, EntityInterface $entity) {
  // Provide elementary entity information.
  $info = [
    'entitytype' => $entity->getEntityTypeId() . '/' . $entity->bundle(),
    'entitylabel' => Xss::filter($entity->label()),
    'entityuuid' => $entity->uuid(),
  ];
  $context_manager
    ->addContextData('targeting', ['targeting' => $info]);
  if ($entity instanceof FieldableEntityInterface) {
    $context_manager->collectContextDataFrom($entity);
  }
}

/**
 * Post render callback to reset the collected context data to a previous state.
 *
 * @param string $markup
 *   The markup result of the rendering.
 *
 * @return string
 *   The markup result.
 */
function _ad_entity_reset_to_previous_context_data($markup) {
  /** @var \Drupal\ad_entity\Plugin\AdContextManager $context_manager */
  if ($context_manager = \Drupal::service('ad_entity.context_manager')) {
    $context_manager->resetToPreviousContextData();
  }
  return $markup;
}
